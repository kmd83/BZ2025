from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, ConversationHandler, filters
import config

# ===== UI helpers =====
def build_main_kb() -> ReplyKeyboardMarkup:
    kb = [
        [KeyboardButton("üßÆ –ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞—Ü–∏–æ–Ω")],
        [KeyboardButton("üìã –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
        [KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")]
    ]
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

CITY, NAME, PHONE, CALORIES = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ])

    caption = (
        "<b>–ü—Ä–∏–≤–µ—Ç! üëã</b>
"
        "–≠—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Ü–∏–æ–Ω–æ–≤ <b>¬´–ë—É–¥—å –ó–¥–æ—Ä–æ–≤¬ª</b> ü•ó‚ú®

"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )

    await update.message.reply_text(caption, parse_mode=ParseMode.HTML, reply_markup=build_main_kb())

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=build_main_kb())

# ===== –ü–æ–¥–±–æ—Ä –∫–∞–ª–æ—Ä–∞–∂–∞ =====
def mifflin_st_jeor(sex: str, age: int, h: float, w: float) -> float:
    if sex.lower().startswith("m"):
        return 10*w + 6.25*h - 5*age + 5
    else:
        return 10*w + 6.25*h - 5*age - 161

CALORIE_OPTIONS = [900, 1200, 1500, 2000, 2500, 3000]

async def pick_calories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø–æ–ª(m/f), –≤–æ–∑—Ä–∞—Å—Ç, —Ä–æ—Å—Ç(—Å–º), –≤–µ—Å(–∫–≥).
"
        "–ü—Ä–∏–º–µ—Ä: m 30 175 70"
    )

async def handle_calories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        sex, age, h, w = update.message.text.split()
        kcal = mifflin_st_jeor(sex, int(age), float(h), float(w))
        closest = min(CALORIE_OPTIONS, key=lambda x: abs(x-kcal))
        await update.message.reply_text(f"–í–∞—à —Ä–∞—Å—á–µ—Ç–Ω—ã–π –∫–∞–ª–æ—Ä–∞–∂: ~{round(kcal)} –∫–∫–∞–ª.
"
                                        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–∞—Ü–∏–æ–Ω: {closest} –∫–∫–∞–ª.")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# ===== –ó–∞—è–≤–∫–∞ =====
async def order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton("–ö–∏–µ–≤", callback_data="city:kyiv"),
           InlineKeyboardButton("–û–¥–µ—Å—Å–∞", callback_data="city:odessa")]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=InlineKeyboardMarkup(kb))
    return CITY

async def order_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    context.user_data["city"] = q.data.split(":")[1]
    await q.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return NAME

async def order_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

async def order_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text.strip()
    kb = [[InlineKeyboardButton(f"{c} –∫–∫–∞–ª", callback_data=f"cal:{c}")] for c in CALORIE_OPTIONS]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Ü–∏–æ–Ω:", reply_markup=InlineKeyboardMarkup(kb))
    return CALORIES

async def order_calories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    cal = q.data.split(":")[1]
    context.user_data["calories"] = cal
    text = (f"üìã –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:
"
            f"–ì–æ—Ä–æ–¥: {context.user_data['city']}
"
            f"–ò–º—è: {context.user_data['name']}
"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}
"
            f"–†–∞—Ü–∏–æ–Ω: {cal} –∫–∫–∞–ª

"
            f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ ‚úÖ")
    await q.edit_message_text(text)
    return ConversationHandler.END

async def order_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=build_main_kb())
    return ConversationHandler.END

# ===== –ö–æ–Ω—Ç–∞–∫—Ç—ã =====
async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[InlineKeyboardButton("Viber", url="viber://chat?number=%2B380660661411"),
           InlineKeyboardButton("Telegram", url="https://t.me/+380660661411")]]
    await update.message.reply_text("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:", reply_markup=InlineKeyboardMarkup(kb))

# ===== –ó–∞–ø—É—Å–∫ =====
if __name__ == "__main__":
    app = Application.builder().token(config.BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))

    app.add_handler(MessageHandler(filters.Regex("üßÆ –ü–æ–¥–æ–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞—Ü–∏–æ–Ω"), pick_calories))
    app.add_handler(MessageHandler(filters.Regex("üìã –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"), order))
    app.add_handler(MessageHandler(filters.Regex("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"), contact))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_calories))

    conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üìã –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"), order)],
        states={
            CITY:      [MessageHandler(filters.ALL, order_city)],
            NAME:      [MessageHandler(filters.TEXT & ~filters.COMMAND, order_name)],
            PHONE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, order_phone)],
            CALORIES:  [MessageHandler(filters.ALL, order_calories)]
        },
        fallbacks=[CommandHandler("cancel", order_cancel)],
    )
    app.add_handler(conv)

    print("Bot running...")
    app.run_polling()
