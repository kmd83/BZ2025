from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters
)

import db, mealplans
from config import BOT_TOKEN, GOALS, ACTIVITY

# ===== UI helpers =====
def build_main_kb() -> ReplyKeyboardMarkup:
    kb = [
        [KeyboardButton("üßÆ –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –ø–ª–∞–Ω"), KeyboardButton("üéØ –ú–µ—Ç–∞")],
        [KeyboardButton("üìã –ü—Ä–æ—Ñ—ñ–ª—å"), KeyboardButton("‚öñÔ∏è –ó–∞–ø–∏—Å–∞—Ç–∏ –≤–∞–≥—É")],
        [KeyboardButton("üìà –Ü—Å—Ç–æ—Ä—ñ—è –≤–∞–≥–∏"), KeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")],
    ]
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

GOAL_PREFIX = "goal:"

# ===== Calculations =====
def bmr(sex:str, age:int, h:float, w:float) -> float:
    sex = (sex or '').lower()
    return 10*w + 6.25*h - 5*age + (5 if sex.startswith('m') else -161)

def tdee(user:dict) -> float:
    return bmr(user['sex'], int(user['age']), float(user['height']), float(user['weight'])) * ACTIVITY.get(int(user['activity']), 1.2)

def target_kcal(tdee_val:float, goal:str) -> float:
    if goal == "loss": return tdee_val * 0.85
    if goal == "gain": return tdee_val * 1.15
    return tdee_val

def macros_from_profile(user: dict, kcal: float):
    weight = float(user['weight'])
    p = 1.8 * weight                 # –±—ñ–ª–æ–∫ –≥/–¥–µ–Ω—å
    f = max(0.8 * weight, 45)        # –∂–∏—Ä–∏ –≥/–¥–µ–Ω—å, –º—ñ–Ω—ñ–º—É–º 45 –≥
    carbs = (kcal - (p*4 + f*9)) / 4 # –≤—É–≥–ª–µ–≤–æ–¥–∏ –≥/–¥–µ–Ω—å
    return round(p), round(f), round(max(carbs, 0))

# ===== Start screen =====
async def start(u: Update, c: ContextTypes.DEFAULT_TYPE):
    await c.bot.set_my_commands([
        BotCommand("start", "—Å—Ç–∞—Ä—Ç–æ–≤–µ –≤—ñ–∫–Ω–æ"),
        BotCommand("menu", "–∫–Ω–æ–ø–∫–∏ –¥—ñ–π"),
        BotCommand("profile", "–ø–æ–∫—Ä–æ–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"),
        BotCommand("setgoal", "–º–µ—Ç–∞: loss/maintain/gain"),
        BotCommand("plan", "–∫–∫–∞–ª/–º–∞–∫—Ä–æ—Å–∏ + –º–µ–Ω—é"),
        BotCommand("weight", "–∑–∞–ø–∏—Å–∞—Ç–∏ –≤–∞–≥—É"),
        BotCommand("stats", "—ñ—Å—Ç–æ—Ä—ñ—è –≤–∞–≥–∏"),
        BotCommand("help", "–¥–æ–ø–æ–º–æ–≥–∞"),
        BotCommand("cancel", "—Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫—Ä–æ–∫"),
    ])

    caption = (
        "<b>–ü—Ä–∏–≤—ñ—Ç! üëã</b>\n"
        "–¶–µ —Ç–≤—ñ–π –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ —É –ø–∏—Ç–∞–Ω–Ω—è—Ö –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±—É –∂–∏—Ç—Ç—è\n"
        "–≤—ñ–¥ —Å–ª—É–∂–±–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Ü—ñ–æ–Ω—ñ–≤ <b>¬´–ë—É–¥—å –ó–¥–æ—Ä–æ–≤¬ª</b> ü•ó‚ú®\n\n"
        "–ù–∞—Ç–∏—Å–Ω–∏ ¬´üìã –ü—Ä–æ—Ñ—ñ–ª—å¬ª –¥–ª—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ."
    )

    try:
        with open("assets/logo.jpg", "rb") as f:
            await u.message.reply_photo(photo=f, caption=caption, parse_mode=ParseMode.HTML, reply_markup=build_main_kb())
            return
    except FileNotFoundError:
        pass

    url = "https://via.placeholder.com/1200x675.png?text=Bud%27+Zdorov"
    await u.message.reply_photo(photo=url, caption=caption, parse_mode=ParseMode.HTML, reply_markup=build_main_kb())

async def menu_cmd(u: Update, c: ContextTypes.DEFAULT_TYPE):
    await u.message.reply_text("–ú–µ–Ω—é:", reply_markup=build_main_kb())

# ===== Goal inline menu =====
async def goal_menu(u: Update, c: ContextTypes.DEFAULT_TYPE):
    kb = [[
        InlineKeyboardButton("ü•ó –°—Ö—É–¥–Ω–µ–Ω–Ω—è", callback_data=f"{GOAL_PREFIX}loss"),
        InlineKeyboardButton("‚öñÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data=f"{GOAL_PREFIX}maintain"),
        InlineKeyboardButton("üí™ –ù–∞–±—ñ—Ä", callback_data=f"{GOAL_PREFIX}gain"),
    ]]
    await u.message.reply_text("–û–±–µ—Ä–∏ –º–µ—Ç—É:", reply_markup=InlineKeyboardMarkup(kb))

async def goal_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    if not data.startswith(GOAL_PREFIX):
        return
    goal = data[len(GOAL_PREFIX):]
    if goal not in GOALS:
        await q.edit_message_text("–ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–∏.")
        return
    db.set_goal(q.from_user.id, goal)
    await q.edit_message_text(f"–ú–µ—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞: {GOALS[goal]} ‚úÖ")

# ===== Profile Wizard (Conversation) =====
GENDER, AGE, HEIGHT, WEIGHT, ACTIVITY, DONE = range(6)

async def profile_entry(u: Update, c: ContextTypes.DEFAULT_TYPE):
    kb = [[
        InlineKeyboardButton("üë® –ß–æ–ª–æ–≤—ñ–∫", callback_data="gender:m"),
        InlineKeyboardButton("üë© –ñ—ñ–Ω–∫–∞",  callback_data="gender:f"),
    ]]
    await u.message.reply_text("–ù–∞–ª–∞—à—Ç—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å. –û–±–µ—Ä–∏ —Å—Ç–∞—Ç—å:", reply_markup=InlineKeyboardMarkup(kb))
    return GENDER

async def profile_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    context.user_data["sex"] = q.data.split(":",1)[1]
    await q.edit_message_text("–í–∫–∞–∂–∏ —Å–≤—ñ–π –≤—ñ–∫ —É —Ä–æ–∫–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30):")
    return AGE

async def profile_age(u: Update, c: ContextTypes.DEFAULT_TYPE):
    try:
        age = int((u.message.text or "").strip())
    except Exception:
        await u.message.reply_text("–í—ñ–∫ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:")
        return AGE
    c.user_data["age"] = age
    await u.message.reply_text("–í–∫–∞–∂–∏ –∑—Ä—ñ—Å—Ç —É —Å–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 175):")
    return HEIGHT

async def profile_height(u: Update, c: ContextTypes.DEFAULT_TYPE):
    try:
        h = float((u.message.text or "").strip())
    except Exception:
        await u.message.reply_text("–ó—Ä—ñ—Å—Ç –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:")
        return HEIGHT
    c.user_data["height"] = h
    await u.message.reply_text("–í–∫–∞–∂–∏ –≤–∞–≥—É —É –∫–≥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 70.5):")
    return WEIGHT

async def profile_weight(u: Update, c: ContextTypes.DEFAULT_TYPE):
    try:
        w = float((u.message.text or "").strip())
    except Exception:
        await u.message.reply_text("–í–∞–≥–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:")
        return WEIGHT
    c.user_data["weight"] = w
    kb = [
        [InlineKeyboardButton("üõãÔ∏è –î—É–∂–µ –Ω–∏–∑—å–∫–∞", callback_data="act:1"), InlineKeyboardButton("üö∂ –õ–µ–≥–∫–∞", callback_data="act:2")],
        [InlineKeyboardButton("üèÉ –°–µ—Ä–µ–¥–Ω—è", callback_data="act:3"), InlineKeyboardButton("üèãÔ∏è –í–∏—Å–æ–∫–∞", callback_data="act:4")],
        [InlineKeyboardButton("üî• –î—É–∂–µ –≤–∏—Å–æ–∫–∞", callback_data="act:5")],
    ]
    await u.message.reply_text("–û–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:", reply_markup=InlineKeyboardMarkup(kb))
    return ACTIVITY

async def profile_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    activity = int(q.data.split(":",1)[1])
    context.user_data["activity"] = activity
    uid = q.from_user.id
    db.set_profile(uid,
                   context.user_data["sex"],
                   context.user_data["age"],
                   context.user_data["height"],
                   context.user_data["weight"],
                   context.user_data["activity"])
    user = db.get_user(uid)
    await q.edit_message_text(f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –í—ñ–∫: {user['age']}, –∑—Ä—ñ—Å—Ç: {user['height']} —Å–º, –≤–∞–≥–∞: {user['weight']} –∫–≥, –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user['activity']}")
    return ConversationHandler.END

async def profile_cancel(u: Update, c: ContextTypes.DEFAULT_TYPE):
    await u.message.reply_text("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=build_main_kb())
    return ConversationHandler.END

# ===== Plan / Weight / Stats / Help =====
async def plan(u: Update, c: ContextTypes.DEFAULT_TYPE):
    user = db.get_user(u.effective_user.id)
    if not user:
        await u.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π –ø—Ä–æ—Ñ—ñ–ª—å: –Ω–∞—Ç–∏—Å–Ω–∏ ¬´üìã –ü—Ä–æ—Ñ—ñ–ª—å¬ª.")
        return
    goal = user.get("goal") or "maintain"
    kcal = target_kcal(tdee(user), goal)
    p,f,carb = macros_from_profile(user, kcal)
    menu = "\\n".join(f"‚Ä¢ {x}" for x in mealplans.sample(goal))
    await u.message.reply_text(
        f"–ú–µ—Ç–∞: {GOALS.get(goal, goal)}\\n"
        f"–ö–∫–∞–ª: ~{round(kcal)}\\n"
        f"–ú–∞–∫—Ä–æ—Å–∏: –±—ñ–ª–∫–∏ {p} –≥, –∂–∏—Ä–∏ {f} –≥, –≤—É–≥–ª–µ–≤–æ–¥–∏ {carb} –≥\\n\\n"
        f"–ü—Ä–∏–±–ª–∏–∑–Ω–µ –º–µ–Ω—é:\\n{menu}",
        reply_markup=build_main_kb()
    )

# (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã weight, stats, help ‚Äî —Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ —Ä–∞–Ω—å—à–µ)

# ===== App bootstrap =====
if __name__ == "__main__":
    db.init_db()
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_cmd))
    app.add_handler(CommandHandler("plan", plan))
    # Conversation –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é
    conv = ConversationHandler(
        entry_points=[CommandHandler("profile", profile_entry)],
        states={
            GENDER:   [CallbackQueryHandler(profile_gender, pattern="^gender:(m|f)$")],
            AGE:      [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_age)],
            HEIGHT:   [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_height)],
            WEIGHT:   [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_weight)],
            ACTIVITY: [CallbackQueryHandler(profile_activity, pattern="^act:[1-5]$")],
        },
        fallbacks=[CommandHandler("cancel", profile_cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(goal_callback, pattern=f"^{GOAL_PREFIX}"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_cmd))
    print("Bot running")
    app.run_polling()
